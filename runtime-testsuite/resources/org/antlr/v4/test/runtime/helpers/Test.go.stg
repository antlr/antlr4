package main
import (
	"fmt"
    "github.com/antlr4-go/antlr/v4"
    "os"
    "test/parser"
)

<if(parserName)>

import "reflect"

type TreeShapeListener struct {
	*parser.Base<grammarName>Listener
}

func NewTreeShapeListener() *TreeShapeListener {
	return new(TreeShapeListener)
}

func (this *TreeShapeListener) EnterEveryRule(ctx antlr.ParserRuleContext) {
	for i := 0; i\<ctx.GetChildCount(); i++ {
		child := ctx.GetChild(i)
		parentR, ok := child.GetParent().(antlr.ParserRuleContext)

		// Have to use reflect here - we need to compare the underlying pointers, but we
		// do not know the types of the underlying structs, just that they will be the same
		// type.
		parPointer := reflect.ValueOf(parentR).Elem().Addr().Pointer()
		ctxPointer := reflect.ValueOf(ctx).Elem().Addr().Pointer()
		if !ok || parPointer != ctxPointer {
			panic("Invalid parse tree shape detected.")
		}
	}
}
<endif>

func main() {
<if(traceATN)>
    antlr.ParserATNSimulatorTraceATNSim = true
<endif>
	input, err := antlr.NewFileStream(os.Args[1])
		if err != nil {
		fmt.Printf("Failed to find file: %v", err)
		return
	}
	lexer := parser.New<lexerName>(input)
	stream := antlr.NewCommonTokenStream(lexer,0)
<if(parserName)>
	p := parser.New<parserName>(stream)
	p.Interpreter.SetPredictionMode(antlr.PredictionMode<predictionMode>)
<if(!buildParseTree)>
	p.BuildParseTrees = false
<endif>
<if(showDiagnosticErrors)>
	p.AddErrorListener(antlr.NewDiagnosticErrorListener(true))
<endif>
	tree := p.<parserStartRuleName>()
	antlr.ParseTreeWalkerDefault.Walk(NewTreeShapeListener(), tree)
<else>
	stream.Fill()
	for _, t := range stream.GetAllTokens() {
		fmt.Println(t)
	}
<if(showDFA)>
	fmt.Print(lexer.GetInterpreter().DecisionToDFA()[antlr.LexerDefaultMode].ToLexerString())
<endif>
<endif>
}

import { default as antlr4 } from 'antlr4';
import <lexerName> from './<lexerName>.js';
<if(parserName)>
import <parserName> from './<parserName>.js';
<if(useListener)>
import <grammarName>Listener from './<grammarName>Listener.js';
<endif>
<if(useVisitor)>
import <grammarName>Visitor from './<grammarName>Visitor.js';
<endif>

class TreeShapeListener extends antlr4.tree.ParseTreeListener {
    enterEveryRule(ctx: antlr4.context.ParserRuleContext) {
        for (let i = 0; i \< ctx.getChildCount(); i++) {
            const child = ctx.getChild(i) as antlr4.context.RuleContext;
            const parent = child.parentCtx;
            if (parent!.ruleContext !== ctx || !(parent instanceof antlr4.tree.RuleNode)) {
                throw `Invalid parse tree shape detected.`;
            }
        }
    }
}
<endif>

function main(argv: string[]): void {
    const input = new antlr4.FileStream(argv[2], true);
    const lexer = new <lexerName>(input);
    const stream = new antlr4.CommonTokenStream(lexer);
<if(parserName)>
    const parser = new <parserName>(stream);
<if(debug)>
    parser.addErrorListener(new antlr4.error.DiagnosticErrorListener());
<endif>
    parser.buildParseTrees = true;
    parser.printer = {
        println : function(s: string) { console.log(s); },
        print : function(s: string) { process.stdout.write(s); }
    };
    const tree = parser.<parserStartRuleName>();
    antlr4.tree.ParseTreeWalker.DEFAULT.walk(new TreeShapeListener(), tree);
<else>
    stream.fill();
    for(let i=0; i\<stream.tokens.length; i++) {
        console.log(stream.tokens[i].toString());
    }
<if(showDFA)>
    process.stdout.write(lexer._interp.decisionToDFA[antlr4.Lexer.DEFAULT_MODE].toLexerString());
<endif>
<endif>
}

main(process.argv);


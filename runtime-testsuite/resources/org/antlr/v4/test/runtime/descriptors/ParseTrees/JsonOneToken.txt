[type]
Parser

[grammar]
grammar VisitorCalc;

s
    :	expr EOF
	|
	;

expr
@init {
   <BuildParseTrees()>
}
@after {
<ToJSON("$ctx"):writeln()>
}
	:	INT						# number
	|   ID                      # var
	|   ID '(' ')'              # func
	|	expr (MUL | DIV) expr	# multiply
	|	expr (ADD | SUB) expr	# add
	;

INT : [0-9]+;
ID  : [a-zA-Z_]+ ;
MUL : '*';
DIV : '/';
ADD : '+';
SUB : '-';
WS : [ \t]+ -> channel(HIDDEN);

[start]
expr

[input]
8

[output]
{"rules":["s","expr"],
"input":"8",
"tokens":[{"type":3,"line":1,"pos":0,"channel":0,"text":"8"}
,{"type":-1,"line":1,"pos":1,"channel":0,"text":"<EOF>"}
],
"tree":{"1":[0]}}
IgnoredTests ::= [
	default: false
]

TestFile(file) ::= <<
/* This file is generated by TestGenerator, any edits will be overwritten by the next generation. */
package org.antlr.v4.test.runtime.javascript.node;

import org.junit.Ignore;
import org.junit.Test;

import static org.junit.Assert.*;

<if(file.Options.("ImportErrorQueue"))>
import org.antlr.v4.test.runtime.java.ErrorQueue;
<endif>
<if(file.Options.("ImportGrammar"))>
import org.antlr.v4.tool.Grammar;
<endif>

@SuppressWarnings("unused")
public class Test<file.name> extends BaseTest {

	<file.tests:{test | <test>}; separator="\n", wrap, anchor>

}<\n>
>>

LexerTestMethod(test) ::= <<
/* This file and method are generated by TestGenerator, any edits will be overwritten by the next generation. */
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	mkdir(tmpdir);
<test.SlaveGrammars:{grammar |
	String slave_<grammar> =<writeStringLiteral(test.SlaveGrammars.(grammar))>;
	writeFile(tmpdir, "<grammar>.g4", slave_<grammar>);
	}; separator="\n">

<test.Grammar:{grammar |
	<buildStringLiteral(test.Grammar.(grammar), "grammar")>
	<test.afterGrammar>
	String input =<writeStringLiteral(test.Input)>;
	String found = execLexer("<grammar>.g4", grammar, "<grammar><if(test.Options.("CombinedGrammar"))>Lexer<endif>", input, <writeBoolean(test.Options.("ShowDFA"))>);
	assertEquals(<writeStringLiteral(test.Output)>, found);
	<if(!isEmpty.(test.Errors))>
	assertEquals(<writeStringLiteral(test.Errors)>, this.stderrDuringParse);
	<else>
	assertNull(this.stderrDuringParse);
	<endif>
    }>
}
>>

CompositeLexerTestMethod(test) ::= <<
<LexerTestMethod(test)>
>>

ParserTestMethod(test) ::= <<
/* This file and method are generated by TestGenerator, any edits will be overwritten by the next generation. */
<testAnnotations(test)>
public void test<test.name>() throws Exception {
	mkdir(tmpdir);
<test.SlaveGrammars:{grammar |
	String slave_<grammar> =<writeStringLiteral(test.SlaveGrammars.(grammar))>;
<if(test.Options.("SlaveIsLexer"))>
	rawGenerateAndBuildRecognizer("<grammar>.g4", slave_<grammar>, null, "<grammar>");
<else>
	writeFile(tmpdir, "<grammar>.g4", slave_<grammar>);
<endif>
	}; separator="\n">
<test.Grammar:{grammar |
	<buildStringLiteral(test.Grammar.(grammar), "grammar")>
	<test.afterGrammar>
	String input =<writeStringLiteral(test.Input)>;
	String found = execParser("<grammar>.g4", grammar, "<grammar>Parser", "<grammar>Lexer",
	                          "<grammar>Listener", "<grammar>Visitor",
	                          "<test.Rule>", input, <writeBoolean(test.Options.("Debug"))>);
	assertEquals(<writeStringLiteral(test.Output)>, found);
	<if(!isEmpty.(test.Errors))>
	assertEquals(<writeStringLiteral(test.Errors)>, this.stderrDuringParse);
	<else>
	assertNull(this.stderrDuringParse);
	<endif>
    }>
}
>>

CompositeParserTestMethod(test) ::= <<
<ParserTestMethod(test)>
>>

AbstractParserTestMethod(test) ::= <<
/* this file and method are generated, any edit will be overwritten by the next generation */
String test<test.name>(String input) throws Exception {
	String grammar = <test.grammar.lines:{ line | "<line>};separator="\\n\" +\n", wrap, anchor>";
	return execParser("<test.grammar.grammarName>.g4", grammar, "<test.grammar.grammarName>Parser",
                      "<test.grammar.grammarName>Listener", "<test.grammar.grammarName>Visitor",
	                  "<test.grammar.grammarName>Lexer", "<test.startRule>", input, <test.debug>);
}

>>

ConcreteParserTestMethod(test) ::= <<
/* this file and method are generated, any edit will be overwritten by the next generation */
@Test
public void test<test.name>() throws Exception {
	String found = test<test.baseName>("<test.input>");
	assertEquals("<test.expectedOutput>", found);
	<if(test.expectedErrors)>
	assertEquals("<test.expectedErrors>", this.stderrDuringParse);
	<else>
	assertNull(this.stderrDuringParse);
	<endif>
}

>>

testAnnotations(test) ::= <%
@Test
<if(test.Options.("Ignore"))>
<\n>@Ignore(<writeStringLiteral(test.Options.("Ignore"))>)
<elseif(IgnoredTests.(({<file.name>.<test.name>})))>
<\n>@Ignore(<writeStringLiteral(IgnoredTests.(({<file.name>.<test.name>})))>)
<endif>
%>

buildStringLiteral(text, variable) ::= <<
StringBuilder <variable>Builder = new StringBuilder(<strlen.(text)>);
<lines.(text):{line|<variable>Builder.append("<escape.(line)>");}; separator="\n">
String <variable> = <variable>Builder.toString();
>>

writeStringLiteral(text) ::= <%
<if(isEmpty.(text))>
""
<else>
<writeLines(lines.(text))>
<endif>
%>

writeLines(textLines) ::= <%
<if(rest(textLines))>
<textLines:{line|
<\n>		"<escape.(line)>}; separator="\" +">"
<else>
"<escape.(first(textLines))>"
<endif>
%>

string(text) ::= <<
"<escape.(text)>"
>>

writeBoolean(o) ::= "<if(o && !isEmpty.(o))>true<else>false<endif>"

writeln(s) ::= <<console.log(<s>);>>

write(s) ::= <<process.stdout.write(<s>);>>

False() ::= "false"

True() ::= "true"

Not(v) ::= "!<v>"

Assert(s) ::= <<console.assert(<s>);>>

Cast(t,v) ::= "<v>"

Append(a,b) ::= "<a> + <b>"

Concat(a,b) ::= "<a><b>"

DeclareLocal(s,v) ::= "var <s> = <v>;"

AssertIsList(v) ::= <<if ( !(v instanceof Array) ) {throw "value is not an array";}>>

AssignLocal(s,v) ::= "<s> = <v>;"

InitIntMember(n,v) ::= <%this.<n> = <v>;%>

InitBooleanMember(n,v) ::= <%this.<n> = <v>;%>

GetMember(n) ::= <%this.<n>%>

SetMember(n,v) ::= <%this.<n> = <v>;%>

AddMember(n,v) ::= <%this.<n> += <v>;%>

PlusMember(v,n) ::= <%<v> + this.<n>%>

MemberEquals(n,v) ::= <%this.<n> === <v>%>

ModMemberEquals(n,m,v) ::= <%this.<n> % <m> === <v>%>

ModMemberNotEquals(n,m,v) ::= <%this.<n> % <m> != <v>%>

DumpDFA() ::= "this.dumpDFA();"

Pass() ::= ""

StringList() ::= "list"

BuildParseTrees() ::= "this.buildParseTrees = true;"

BailErrorStrategy() ::= <%this._errHandler = new antlr4.error.BailErrorStrategy();%>

ToStringTree(s) ::= <%<s>.toStringTree(null, this)%>

Column() ::= "this.column"

Text() ::= "this.text"

ValEquals(a,b) ::= <%<a>===<b>%>

TextEquals(a) ::= <%this.text==="<a>"%>

PlusText(a) ::= <%"<a>" + this.text%>

InputText() ::= "this._input.getText()"

LTEquals(i, v) ::= <%this._input.LT(<i>).text===<v>%>

LANotEquals(i, v) ::= <%this._input.LA(<i>)!=<v>%>

TokenStartColumnEquals(i) ::= <%this._tokenStartColumn===<i>%>

ImportListener(X) ::= <<var <X>Listener = require('./<X>Listener').<X>Listener;>>

ImportVisitor(X) ::= <<var <X>Visitor = require('./<X>Visitor').<X>Visitor;>>

GetExpectedTokenNames() ::= "this.getExpectedTokens().toString(this.literalNames)"

RuleInvocationStack() ::= "antlr4.Utils.arrayToString(this.getRuleInvocationStack())"

LL_EXACT_AMBIG_DETECTION() ::= <<this._interp.predictionMode = antlr4.atn.PredictionMode.LL_EXACT_AMBIG_DETECTION;>>

ParserToken(parser, token) ::= <%<parser>.<token>%>

Production(p) ::= <%<p>%>

Result(r) ::= <%<r>%>

ParserPropertyMember() ::= <<
@members {
this.Property = function() {
    return true;
}
}
>>

PositionAdjustingLexer() ::= <<

PositionAdjustingLexer.prototype.resetAcceptPosition = function(index, line, column) {
	this._input.seek(index);
	this.line = line;
	this.column = column;
	this._interp.consume(this._input);
};

PositionAdjustingLexer.prototype.nextToken = function() {
	if (!("resetAcceptPosition" in this._interp)) {
		var lexer = this;
		this._interp.resetAcceptPosition = function(index, line, column) { lexer.resetAcceptPosition(index, line, column); };
	}
	return antlr4.Lexer.prototype.nextToken.call(this);
};

PositionAdjustingLexer.prototype.emit = function() {
	switch(this._type) {
	case PositionAdjustingLexer.TOKENS:
		this.handleAcceptPositionForKeyword("tokens");
		break;
	case PositionAdjustingLexer.LABEL:
		this.handleAcceptPositionForIdentifier();
		break;
	}
	return antlr4.Lexer.prototype.emit.call(this);
};

PositionAdjustingLexer.prototype.handleAcceptPositionForIdentifier = function() {
	var tokenText = this.text;
	var identifierLength = 0;
	while (identifierLength \< tokenText.length &&
		PositionAdjustingLexer.isIdentifierChar(tokenText[identifierLength])
	) {
		identifierLength += 1;
	}
	if (this._input.index > this._tokenStartCharIndex + identifierLength) {
		var offset = identifierLength - 1;
		this._interp.resetAcceptPosition(this._tokenStartCharIndex + offset,
				this._tokenStartLine, this._tokenStartColumn + offset);
		return true;
	} else {
		return false;
	}
};

PositionAdjustingLexer.prototype.handleAcceptPositionForKeyword = function(keyword) {
	if (this._input.index > this._tokenStartCharIndex + keyword.length) {
		var offset = keyword.length - 1;
		this._interp.resetAcceptPosition(this._tokenStartCharIndex + offset,
			this._tokenStartLine, this._tokenStartColumn + offset);
		return true;
	} else {
		return false;
	}
};

PositionAdjustingLexer.isIdentifierChar = function(c) {
	return c.match(/^[0-9a-zA-Z_]+$/);
}

>>

BasicListener(X) ::= <<
this.LeafListener = function() {
    this.visitTerminal = function(node) {
    	console.log(node.symbol.text);
    };
    return this;
};
this.LeafListener.prototype = Object.create(<X>Listener.prototype);
this.LeafListener.prototype.constructor = this.LeafListener;

>>

WalkListener(s) ::= <<
var walker = new antlr4.tree.ParseTreeWalker();
walker.walk(new this.LeafListener(), <s>);
>>

BasicVisitor(X) ::= <<
this.LeafVisitor = function() {
    this.visitTerminal = function(node) {
        return node.symbol.text;
    };
    return this;
};
this.LeafVisitor.prototype = Object.create(<X>Visitor.prototype);
this.LeafVisitor.prototype.constructor = this.LeafVisitor;

>>

WalkVisitor(s) ::= <<
var visitor = new this.LeafVisitor();
console.log(<s>.accept(visitor));
>>


TreeNodeWithAltNumField(X) ::= <<

@parser::header {
MyRuleNode = function(parent, invokingState) {
	antlr4.ParserRuleContext.call(this, parent, invokingState);

	this.altNum = 0;
	return this;
};

MyRuleNode.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MyRuleNode.prototype.constructor = MyRuleNode;
MyRuleNode.prototype.getAltNumber = function() { return this.altNum; }
MyRuleNode.prototype.setAltNumber = function(altNumber) { this.altNum = altNumber; }

}
>>

TokenGetterListener(X) ::= <<
this.LeafListener = function() {
    this.exitA = function(ctx) {
    	var str;
        if(ctx.getChildCount()===2) {
            str = ctx.INT(0).symbol.text + ' ' + ctx.INT(1).symbol.text + ' ' + antlr4.Utils.arrayToString(ctx.INT());
        } else {
            str = ctx.ID().symbol.toString();
        }
    	console.log(str);
    };
    return this;
};
this.LeafListener.prototype = Object.create(<X>Listener.prototype);
this.LeafListener.prototype.constructor = this.LeafListener;

>>

TokenGetterVisitor(X) ::= <<
this.LeafVisitor = function() {
    this.visitA = function(ctx) {
        var str;
        if(ctx.getChildCount()===2) {
            str = ctx.INT(0).symbol.text + ' ' + ctx.INT(1).symbol.text + ' ' + antlr4.Utils.arrayToString(ctx.INT());
        } else {
            str = ctx.ID().symbol.toString();
        }
        return this.visitChildren(ctx) + str;
    };
    return this;
};
this.LeafVisitor.prototype = Object.create(<X>Visitor.prototype);
this.LeafVisitor.prototype.constructor = this.LeafVisitor;

>>

RuleGetterListener(X) ::= <<
this.LeafListener = function() {
    this.exitA = function(ctx) {
    	var str;
        if(ctx.getChildCount()===2) {
            str = ctx.b(0).start.text + ' ' + ctx.b(1).start.text + ' ' + ctx.b()[0].start.text;
        } else {
            str = ctx.b(0).start.text;
        }
    	console.log(str);
    };
    return this;
};
this.LeafListener.prototype = Object.create(<X>Listener.prototype);
this.LeafListener.prototype.constructor = this.LeafListener;

>>

RuleGetterVisitor(X) ::= <<
this.LeafVisitor = function() {
    this.visitA = function(ctx) {
        var str;
        if(ctx.getChildCount()===2) {
            str = ctx.b(0).start.text + ' ' + ctx.b(1).start.text + ' ' + ctx.b()[0].start.text;
        } else {
            str = ctx.b(0).start.text;
        }
        return this.visitChildren(ctx) + str;
    };
    return this;
};
this.LeafVisitor.prototype = Object.create(<X>Visitor.prototype);
this.LeafVisitor.prototype.constructor = this.LeafVisitor;

>>


LRListener(X) ::= <<
this.LeafListener = function() {
    this.exitE = function(ctx) {
    	var str;
        if(ctx.getChildCount()===3) {
            str = ctx.e(0).start.text + ' ' + ctx.e(1).start.text + ' ' + ctx.e()[0].start.text;
        } else {
            str = ctx.INT().symbol.text;
        }
    	console.log(str);
    };
    return this;
};
this.LeafListener.prototype = Object.create(<X>Listener.prototype);
this.LeafListener.prototype.constructor = this.LeafListener;

>>

LRVisitor(X) ::= <<
this.LeafVisitor = function() {
    this.visitE = function(ctx) {
        var str;
        if(ctx.getChildCount()===3) {
            str = ctx.e(0).start.text + ' ' + ctx.e(1).start.text + ' ' + ctx.e()[0].start.text;
        } else {
            str = ctx.INT().symbol.text;
        }
        return this.visitChildren(ctx) + str;
    };
    return this;
};
this.LeafVisitor.prototype = Object.create(<X>Visitor.prototype);
this.LeafVisitor.prototype.constructor = this.LeafVisitor;

>>

LRWithLabelsListener(X) ::= <<
this.LeafListener = function() {
    this.exitCall = function(ctx) {
    	var str = ctx.e().start.text + ' ' + ctx.eList();
    	console.log(str);
    };
    this.exitInt = function(ctx) {
        var str = ctx.INT().symbol.text;
        console.log(str);
    };
    return this;
};
this.LeafListener.prototype = Object.create(<X>Listener.prototype);
this.LeafListener.prototype.constructor = this.LeafListener;

>>

LRWithLabelsVisitor(X) ::= <<
this.LeafVisitor = function() {
    this.visitCall = function(ctx) {
        var str = ctx.e().start.text + ' ' + ctx.eList();
        return this.visitChildren(ctx) + str;
    };
    this.visitInt = function(ctx) {
        var str = ctx.INT().symbol.text;
        return this.visitChildren(ctx) + str;
    };
    return this;
};
this.LeafVisitor.prototype = Object.create(<X>Visitor.prototype);
this.LeafVisitor.prototype.constructor = this.LeafVisitor;

>>

DeclareContextListGettersFunction() ::= <<
	function foo() {
		var s = new SContext();
	    var a = s.a();
	    var b = s.b();
    };
>>

Declare_foo() ::= "this.foo = function() {console.log('foo');};"

Invoke_foo() ::= "this.foo();"

Declare_pred() ::= <<this.pred = function(v) {
	console.log("eval=" + v.toString());
	return v;
};
>>

Invoke_pred(v) ::= <<this.pred(<v>)>>

isEmpty ::= [
	"": true,
	default: false
]

TestType() ::= "CompositeParser"

Grammar ::= [
	"M": {<masterGrammar("M", "S")>}
]

SlaveGrammars ::= [
	"S": {<slaveGrammar("S")>}
]

Rule() ::= "s"

Input() ::= "b"

Output() ::= <<
S.a1000<\n>
>>

Errors() ::= ""

masterGrammar(grammarName, slaveGrammarName) ::= <<
grammar M;
import S;
s : label=a[3] {<writeln("$label.y")>} ;
B : 'b' ; // defines B from inherited token space
WS : (' '|'\n') -> skip ;
>>

slaveGrammar(grammarName) ::= <<
parser grammar S;
a[int x] returns [int y] : B {<write("\"S.a\"")>} {$y=1000;} ;
>>

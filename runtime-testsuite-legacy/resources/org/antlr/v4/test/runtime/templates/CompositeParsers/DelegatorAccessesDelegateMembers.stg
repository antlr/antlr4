TestType() ::= "CompositeParser"

Grammar ::= [
	"M": {<masterGrammar("M", "S")>}
]

SlaveGrammars ::= [
	"S": {<slaveGrammar("S")>}
]

Rule() ::= "s"

Input() ::= "b"

Output() ::= <<
foo<\n>
>>

Errors() ::= ""

masterGrammar(grammarName, slaveGrammarName) ::= <<
grammar M; // uses no rules from the import
import S;
s : 'b' {<Invoke_foo()>} ; // gS is import pointer
WS : (' '|'\n') -> skip ;
>>

slaveGrammar(grammarName) ::= <<
parser grammar S;
@parser::members {
<Declare_foo()>
}
a : B;
>>

/*
 * Copyright (c) 2012-2020 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

dTypeInitMap ::= [
    "int":"0",
    "long":"0",
    "float":"0.0f",
    "double":"0.0",
    "bool":"false",
    "byte":"0",
    "short":"0",
    "char":"0",
    default:"null" // anything other than a primitive type is an object
]

// args must be <object-model-object>, <fields-resulting-in-STs>

ParserFile(file, parser, namedActions, contextSuperClass) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
package <file.genPackage>;
<endif>
<namedActions.header>
import antlr.v4.runtime.atn.ATN : ATN;
alias ATNType = ATN;
import antlr.v4.runtime.atn.ATNDeserializer;
import antlr.v4.runtime.atn.PredictionContextCache;
import antlr.v4.runtime.atn.PredictionModeConst;
import antlr.v4.runtime.atn.ParserATNSimulator;
import antlr.v4.runtime.atn.InterfaceParserATNSimulator;
import antlr.v4.runtime.dfa.DFA;
import antlr.v4.runtime.BailErrorStrategy;
import antlr.v4.runtime.RuntimeMetaData;
import antlr.v4.runtime.Parser;
import antlr.v4.runtime.Token;
import antlr.v4.runtime.CommonToken;
import antlr.v4.runtime.TokenConstantDefinition;
import antlr.v4.runtime.ParserRuleContext;
import antlr.v4.runtime.InterfaceRuleContext;
import antlr.v4.runtime.LexerNoViableAltException;
import antlr.v4.runtime.FailedPredicateException;
import antlr.v4.runtime.NoViableAltException;
import antlr.v4.runtime.RecognitionException;
import antlr.v4.runtime.Vocabulary;
import antlr.v4.runtime.VocabularyImpl;
import antlr.v4.runtime.TokenStream;
import antlr.v4.runtime.tree.ParseTreeListener;
import antlr.v4.runtime.tree.ParseTreeVisitor;
import antlr.v4.runtime.tree.TerminalNode;
import antlr.v4.runtime.tree.ParseTreeWalker;
import std.conv : to;

<parser>
>>

ListenerFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
package <file.genPackage>;
<endif>
<header>
import antlr.v4.runtime.tree.ParseTreeListener;
import <file.parserName> : <file.parserName>;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link <file.parserName>}.
 */
public interface <file.grammarName>Listener : ParseTreeListener {
    <file.listenerNames:{lname |
/**
<if(file.listenerLabelRuleNames.(lname))>
 * Enter a parse tree produced by the {@code <lname>\}
 * labeled alternative in {@link <file.parserName>#<file.listenerLabelRuleNames.(lname)>\}.
<else>
 * Enter a parse tree produced by {@link <file.parserName>#<lname>\}.
<endif>
 * @param ctx the parse tree
 */
void enter<lname; format="cap">(<file.parserName>.<lname; format="cap">Context ctx);
/**
<if(file.listenerLabelRuleNames.(lname))>
 * Exit a parse tree produced by the {@code <lname>\}
 * labeled alternative in {@link <file.parserName>#<file.listenerLabelRuleNames.(lname)>\}.
<else>
 * Exit a parse tree produced by {@link <file.parserName>#<lname>\}.
<endif>
 * @param ctx the parse tree
 */
void exit<lname; format="cap">(<file.parserName>.<lname; format="cap">Context ctx);}; separator="\n">
}
>>

BaseListenerFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
package <file.genPackage>;
<endif>
<header>

import antlr.v4.runtime.ParserRuleContext;
import antlr.v4.runtime.tree.ErrorNode;
import antlr.v4.runtime.tree.TerminalNode;
import <file.grammarName>Listener;
import <file.parserName>: <file.parserName>;

/**
 * This class provides an empty implementation of {@link <file.grammarName>Listener},
 * which can be extended to create a listener which only needs to handle a subset
 * of the available methods.
 */
public class <file.grammarName>BaseListener : <file.grammarName>Listener {
    <file.listenerNames:{lname |
/**
 * {@inheritDoc\}
 *
 * \<p>The default implementation does nothing.\</p>
 */
override public void enter<lname; format="cap">(<file.parserName>.<lname; format="cap">Context ctx) { \}
/**
 * {@inheritDoc\}
 *
 * \<p>The default implementation does nothing.\</p>
 */
override public void exit<lname; format="cap">(<file.parserName>.<lname; format="cap">Context ctx) { \}}; separator="\n">

    /**
     * {@inheritDoc\}
     *
     * \<p>The default implementation does nothing.\</p>
     */
    override public void enterEveryRule(ParserRuleContext ctx) { }
    /**
     * {@inheritDoc\}
     *
     * \<p>The default implementation does nothing.\</p>
     */
    override public void exitEveryRule(ParserRuleContext ctx) { }
    /**
     * {@inheritDoc\}
     *
     * \<p>The default implementation does nothing.\</p>
     */
    override public void visitTerminal(TerminalNode node) { }
    /**
     * {@inheritDoc\}
     *
     * \<p>The default implementation does nothing.\</p>
     */
    override public void visitErrorNode(ErrorNode node) { }
}
>>

VisitorFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
package <file.genPackage>;
<endif>
<header>
import antlr.v4.runtime.tree.ParseTreeVisitor;
import std.variant : Variant;
import <file.grammarName>Parser : <file.grammarName>Parser;

/**
 * This interface defines a complete generic visitor for a parse tree produced
 * by {@link <file.parserName>}.
 *
 * @param Variant The return type of the visit operation. Use {@link void} for
 * operations with no return type.
 */
public interface <file.grammarName>Visitor : ParseTreeVisitor {
    <file.visitorNames:{lname |
/**
<if(file.visitorLabelRuleNames.(lname))>
 * Visit a parse tree produced by the {@code <lname>\}
 * labeled alternative in {@link <file.parserName>#<file.visitorLabelRuleNames.(lname)>\}.
<else>
 * Visit a parse tree produced by {@link <file.parserName>#<lname>\}.
<endif>
 * @param ctx the parse tree
 * @return the visitor result
 */
public Variant visit<lname; format="cap">(<file.parserName>.<lname; format="cap">Context ctx);}; separator="\n">
}
>>

BaseVisitorFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
package <file.genPackage>;
<endif>
<header>
import antlr.v4.runtime.tree.AbstractParseTreeVisitor;
import std.variant : Variant;
import <file.grammarName>Visitor;
import <file.grammarName>Parser : <file.grammarName>Parser;

/**
 * This class provides an empty implementation of {@link <file.grammarName>Visitor},
 * which can be extended to create a visitor which only needs to handle a subset
 * of the available methods.
 *
 * @param Variant The return type of the visit operation. Use {@link void} for
 * operations with no return type.
 */
public class <file.grammarName>BaseVisitor : AbstractParseTreeVisitor, <file.grammarName>Visitor {
    <file.visitorNames:{lname |
/**
 * {@inheritDoc\}
 *
 * \<p>The default implementation returns the result of calling
 * {@link #visitChildren\} on {@code ctx\}.\</p>
 */
override public Variant visit<lname; format="cap">(<file.parserName>.<lname; format="cap">Context ctx) { return visitChildren(ctx); \}}; separator="\n">
}
>>

fileHeader(grammarFileName, ANTLRVersion) ::= <<
// Generated from <grammarFileName; format="java-escape"> by ANTLR <ANTLRVersion>
>>

Parser(parser, funcs, atn, sempredFuncs, superClass) ::= <<
<Parser_(ctor="parser_ctor", ...)>
>>

Parser_(parser, funcs, atn, sempredFuncs, ctor, superClass) ::= <<
public class <parser.name> : <superClass; null="Parser"> {
    static this() { RuntimeMetaData.checkVersion("<file.ANTLRVersion>", RuntimeMetaData.VERSION); }

    protected static DFA[] _decisionToDFA;
    protected PredictionContextCache _sharedContextCache =
        new PredictionContextCache();
    <if(parser.tokens)>
    public static const int
        <parser.tokens:{k | <k>=<parser.tokens.(k)>}; separator=",", wrap, anchor>;
    <endif>
    public static const int
        <parser.rules:{r | RULE_<r.name> = <r.index>}; separator=",", wrap, anchor>;
    public static const string[] ruleNames = [
        <parser.ruleNames:{r | "<r>"}; separator=",", wrap, anchor>
    ];

    <vocabulary(parser.literalNames, parser.symbolicNames)>

    override
    public string getGrammarFileName() { return "<parser.grammarFileName; format="java-escape">"; }

    override
    public string[] getRuleNames() { return ruleNames.dup; }

    override
    public wstring getSerializedATN() { return _serializedATN; }

    override
    public ATNType getATN() { return _ATN; }

    <namedActions.members>
    <parser:(ctor)()>
    <funcs; separator="\n">

<if(sempredFuncs)>
    override
    public bool sempred(InterfaceRuleContext _localctx, int ruleIndex, int predIndex) {
        switch (ruleIndex) {
        <parser.sempredFuncs.values:{f|
case <f.ruleIndex>:
    return <f.name>_sempred(cast(<f.ctxType>)_localctx, predIndex);};
    separator="\n">
    default: {}
    }
    return true;
}
    <sempredFuncs.values; separator="\n">
<endif>

    <atn>
}
>>

vocabulary(literalNames, symbolicNames) ::= <<
private static const string[] _LITERAL_NAMES = [
    <literalNames:{t | <t>}; null="null", separator=",", wrap, anchor>
];
private static const string[] _SYMBOLIC_NAMES = [
    <symbolicNames:{t | <t>}; null="null", separator=",", wrap, anchor>
];
public static Vocabulary VOCABULARY;

/**
 * @deprecated Use {@link #VOCABULARY} instead.
 */
public static string[_SYMBOLIC_NAMES.length] tokenNames;

static this() {
    VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);
    for (int i = 0; i \< tokenNames.length; i++) {
        tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] is null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
        }
        if (tokenNames[i] is null)
        {
            tokenNames[i] = "\<INVALID>";
        }
    }
}

override public string[] getTokenNames() {
    return tokenNames;
}

override public Vocabulary getVocabulary() {
    return VOCABULARY;
}
>>

dumpActions(recog, argFuncs, actionFuncs, sempredFuncs) ::= <<
<if(actionFuncs)>
override
public void action(InterfaceRuleContext _localctx, int ruleIndex, int actionIndex) {
    switch (ruleIndex) {
    <recog.actionFuncs.values:{f|
case <f.ruleIndex>:
    <f.name>_action(cast(Interface<f.ctxType>)_localctx, actionIndex);
    break;}; separator="\n">
        default: {}
    }
}
<actionFuncs.values; separator="\n">
<endif>
<if(sempredFuncs)>
override
public bool sempred(InterfaceRuleContext _localctx, int ruleIndex, int predIndex) {
    switch (ruleIndex) {
    <recog.sempredFuncs.values:{f|
case <f.ruleIndex>:
    return <f.name>_sempred(cast(<f.ctxType>)_localctx, predIndex);}; separator="\n">
    default: {}
    }
    return true;
}
<sempredFuncs.values; separator="\n">
<endif>
>>

parser_ctor(p) ::= <<
public this(TokenStream input) {
    super(input);
    _interp = new ParserATNSimulator(this,_ATN, _decisionToDFA, _sharedContextCache);
}
>>

/* This generates a private method since the actionIndex is generated, making an
 * overriding implementation impossible to maintain.
 */
RuleActionFunction(r, actions) ::= <<
private void <r.name>_action(Interface<r.ctxType> _localctx, int actionIndex) {
    switch (actionIndex) {
    <actions:{index|
case <index>:
    <actions.(index)>
    break;}; separator="\n">
        default: {}
    }
}
>>

/* This generates a private method since the predIndex is generated, making an
 * overriding implementation impossible to maintain.
 */
RuleSempredFunction(r, actions) ::= <<
private bool <r.name>_sempred(<r.ctxType> _localctx, int predIndex) {
    switch (predIndex) {
    <actions:{index|
case <index>:
    return <actions.(index)>;}; separator="\n">
        default: {}
    }
    return true;
}
>>

RuleFunction(currentRule,args,code,locals,ruleCtx,altLabelCtxs,namedActions,finallyAction,postamble,exceptions) ::= <<

<ruleCtx>
<altLabelCtxs:{l | <altLabelCtxs.(l)>}; separator="\n">

<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else>public <endif><currentRule.ctxType> <currentRule.name>(<args; separator=",">) {
    <currentRule.ctxType> _localctx = new <currentRule.ctxType>(ctx_, getState()<currentRule.args:{a | , <a.name>}>);
    enterRule(_localctx, <currentRule.startState>, RULE_<currentRule.name>);
    <namedActions.init>
    <locals; separator="\n">
    try {
<if(currentRule.hasLookaheadBlock)>
        int _alt;
<endif>
        <code>
        <postamble; separator="\n">
        <namedActions.after>
    }
    <if(exceptions)>
    <exceptions; separator="\n">
    <else>
    catch (RecognitionException re) {
        _localctx.exception = re;
        _errHandler.reportError(this, re);
        _errHandler.recover(this, re);
    }
    <endif>
    finally {
        <finallyAction>
        exitRule();
    }
    return _localctx;
}
>>

LeftRecursiveRuleFunction(currentRule,args,code,locals,ruleCtx,altLabelCtxs,
    namedActions,finallyAction,postamble) ::=
<<

<ruleCtx>
<altLabelCtxs:{l | <altLabelCtxs.(l)>}; separator="\n">

<if(currentRule.modifiers)><currentRule.modifiers:{f | <f> }><else>public <endif><currentRule.ctxType> <currentRule.name>(<args; separator=", ">) {
    return <currentRule.name>(0<currentRule.args:{a | , <a.name>}>);
}

private <currentRule.ctxType> <currentRule.name>(int _p<args:{a | , <a>}>) {
    ParserRuleContext _parentctx = ctx_;
    int _parentState = getState();
    <currentRule.ctxType> _localctx = new <currentRule.ctxType>(ctx_, _parentState<currentRule.args:{a | , <a.name>}>);
    <currentRule.ctxType> _prevctx = _localctx;
    int _startState = <currentRule.startState>;
    enterRecursionRule(_localctx, <currentRule.startState>, RULE_<currentRule.name>, _p);
    <namedActions.init>
    <locals; separator="\n">
    try {
<if(currentRule.hasLookaheadBlock)>
        int _alt;
<endif>
        <code>
        <postamble; separator="\n">
        <namedActions.after>
    }
    catch (RecognitionException re) {
        _localctx.exception = re;
        _errHandler.reportError(this, re);
        _errHandler.recover(this, re);
    }
    finally {
        <finallyAction>
        unrollRecursionContexts(_parentctx);
    }
    return _localctx;
}
>>

CodeBlockForOuterMostAlt(currentOuterMostAltCodeBlock, locals, preamble, ops) ::= <<
<if(currentOuterMostAltCodeBlock.altLabel)>_localctx = new <currentOuterMostAltCodeBlock.altLabel; format="cap">Context(_localctx);<endif>
enterOuterAlt(_localctx, <currentOuterMostAltCodeBlock.alt.altNum>);
<CodeBlockForAlt(currentAltCodeBlock=currentOuterMostAltCodeBlock, ...)>
>>

CodeBlockForAlt(currentAltCodeBlock, locals, preamble, ops) ::= <<
{
<locals; separator="\n">
<preamble; separator="\n">
<ops; separator="\n">
}
>>

LL1AltBlock(choice, preamble, alts, error) ::= <<
setState(<choice.stateNumber>);
_errHandler.sync(this);
<if(choice.label)><labelref(choice.label)> = _input.LT(1);<endif>
<preamble; separator="\n">
switch (_input.LA(1)) {
<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
    <alt>
    break;}; separator="\n">
default:
    <error>
}
>>

LL1OptionalBlock(choice, alts, error) ::= <<
setState(<choice.stateNumber>);
_errHandler.sync(this);
switch (_input.LA(1)) {
<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
    <alt>
    break;}; separator="\n">
default:
    break;
}
>>

LL1OptionalBlockSingleAlt(choice, expr, alts, preamble, error, followExpr) ::= <<
setState(<choice.stateNumber>);
_errHandler.sync(this);
<preamble; separator="\n">
if (<expr>) {
    <alts; separator="\n">
}
<!else if ( !(<followExpr>) ) <error>!>
>>

LL1StarBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
setState(<choice.stateNumber>);
_errHandler.sync(this);
<preamble; separator="\n">
while (<loopExpr>) {
    <alts; separator="\n">
    setState(<choice.loopBackStateNumber>);
    _errHandler.sync(this);
    <iteration>
}
>>

LL1PlusBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
setState(<choice.blockStartStateNumber>); <! alt block decision !>
_errHandler.sync(this);
<preamble; separator="\n">
do {
    <alts; separator="\n">
    setState(<choice.stateNumber>); <! loopback/exit decision !>
    _errHandler.sync(this);
    <iteration>
} while ( <loopExpr> );
>>

// LL(*) stuff

AltBlock(choice, preamble, alts, error) ::= <<
setState(<choice.stateNumber>);
_errHandler.sync(this);
<if(choice.label)><labelref(choice.label)> = _input.LT(1);<endif>
<preamble; separator="\n">
switch ( getInterpreter.adaptivePredict(_input,<choice.decision>, ctx_) ) {
<alts:{alt |
case <i>:
    <alt>
    break;}; separator="\n">
        default: {}
}
>>

OptionalBlock(choice, alts, error) ::= <<
setState(<choice.stateNumber>);
_errHandler.sync(this);
switch ( getInterpreter.adaptivePredict(_input,<choice.decision>, ctx_) ) {
<alts:{alt |
case <i><if(!choice.ast.greedy)>+1<endif>:
    <alt>
    break;}; separator="\n">
        default: {}
}
>>

StarBlock(choice, alts, sync, iteration) ::= <<
setState(<choice.stateNumber>);
_errHandler.sync(this);
_alt = getInterpreter.adaptivePredict(_input,<choice.decision>, ctx_);
while ( _alt!=<choice.exitAlt> && _alt!=ATNType.INVALID_ALT_NUMBER ) {
    if ( _alt==1<if(!choice.ast.greedy)>+1<endif> ) {
        <iteration>
        <alts> <! should only be one !>
    }
    setState(<choice.loopBackStateNumber>);
    _errHandler.sync(this);
    _alt = getInterpreter.adaptivePredict(_input,<choice.decision>, ctx_);
}
>>

PlusBlock(choice, alts, error) ::= <<
setState(<choice.blockStartStateNumber>); <! alt block decision !>
_errHandler.sync(this);
_alt = 1<if(!choice.ast.greedy)>+1<endif>;
do {
    switch (_alt) {
    <alts:{alt|
case <i><if(!choice.ast.greedy)>+1<endif>:
    <alt>
    break;}; separator="\n">
    default:
        <error>
    }
    setState(<choice.loopBackStateNumber>); <! loopback/exit decision !>
    _errHandler.sync(this);
    _alt = getInterpreter.adaptivePredict(_input,<choice.decision>, ctx_);
} while ( _alt!=<choice.exitAlt> && _alt!=ATN.INVALID_ALT_NUMBER );
>>

Sync(s) ::= "sync(<s.expecting.name>);"

ThrowNoViableAlt(t) ::= "throw new NoViableAltException(this);"

TestSetInline(s) ::= <<
<s.bitsets:{bits | <if(rest(rest(bits.ttypes)))><bitsetBitfieldComparison(s, bits)><else><bitsetInlineComparison(s, bits)><endif>}; separator=" || ">
>>

// Java language spec 15.19 - shift operators mask operands rather than overflow to 0... need range test
testShiftInRange(shiftAmount) ::= <<
((<shiftAmount>) & ~0x3f) == 0
>>

// produces smaller bytecode only when bits.ttypes contains more than two items
bitsetBitfieldComparison(s, bits) ::= <%
(<testShiftInRange({<offsetShift(s.varName, bits.shift)>})> && ((1L \<\< <offsetShift(s.varName, bits.shift)>) & (<bits.ttypes:{ttype | (1L \<\< <offsetShift(ttype, bits.shift)>)}; separator=" | ">)) != 0)
%>

isZero ::= [
"0":true,
default:false
]

offsetShift(shiftAmount, offset) ::= <%
<if(!isZero.(offset))>(<shiftAmount> - <offset>)<else><shiftAmount><endif>
%>

// produces more efficient bytecode when bits.ttypes contains at most two items
bitsetInlineComparison(s, bits) ::= <%
<bits.ttypes:{ttype | <s.varName>==<ttype>}; separator=" || ">
%>

cases(ttypes) ::= <<
<ttypes:{t | case <t>:}; separator="\n">
>>

InvokeRule(r, argExprsChunks) ::= <<
setState(<r.stateNumber>);
<if(r.labels)><r.labels:{l | <labelref(l)> = }><endif><r.name>(<if(r.ast.options.p)><r.ast.options.p><if(argExprsChunks)>,<endif><endif><argExprsChunks>);
>>

MatchToken(m) ::= <<
setState(<m.stateNumber>);
<if(m.labels)><m.labels:{l | <labelref(l)> = }><endif>match(<m.name>);
>>

MatchSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, false)>"

MatchNotSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, true)>"

CommonSetStuff(m, expr, capture, invert) ::= <<
setState(<m.stateNumber>);
<if(m.labels)><m.labels:{l | <labelref(l)> = }>_input.LT(1);<endif>
<capture>
if ( <if(invert)><m.varName> \<= 0 || <else>!<endif>(<expr>) ) {
    <if(m.labels)><m.labels:{l | <labelref(l)> = cast(Token)}><endif>_errHandler.recoverInline(this);
}
else {
    if (_input.LA(1) == TokenConstantDefinition.EOF)
        matchedEOF = true;
    _errHandler.reportMatch(this);
    consume();
}
>>

Wildcard(w) ::= <<
setState(<w.stateNumber>);
<if(w.labels)><w.labels:{l | <labelref(l)> = }><endif>matchWildcard();
>>

// ACTION STUFF

Action(a, foo, chunks) ::= "<chunks>"

ArgAction(a, chunks) ::= "<chunks>"

SemPred(p, chunks, failChunks) ::= <<
setState(<p.stateNumber>);
if (!(<chunks>)) throw new FailedPredicateException(this, <p.predicate><if(failChunks)>, <failChunks><elseif(p.msg)>, <p.msg><endif>);
>>

ExceptionClause(e, catchArg, catchAction) ::= <<
catch (<catchArg>) {
    <catchAction>
}
>>

// lexer actions are not associated with model objects

LexerSkipCommand()  ::= "skip();"
LexerMoreCommand()  ::= "more();"
LexerPopModeCommand() ::= "popMode();"

LexerTypeCommand(arg, grammar)      ::= "_type = <arg>;"
LexerChannelCommand(arg, grammar)   ::= "_channel = <arg>;"
LexerModeCommand(arg, grammar)      ::= "_mode = <arg>;"
LexerPushModeCommand(arg, grammar)  ::= "pushMode(<arg>);"

ActionText(t) ::= "<t.text>"
ActionTemplate(t) ::= "<t.st>"
ArgRef(a) ::= "_localctx.<a.name>"
LocalRef(a) ::= "_localctx.<a.name>"
RetValueRef(a) ::= "_localctx.<a.name>"
QRetValueRef(a) ::= "<ctx(a)>.<a.dict>.<a.name>"
/** How to translate $tokenLabel */
TokenRef(t) ::= "<ctx(t)>.<t.name>"
LabelRef(t) ::= "<ctx(t)>.<t.name>"
ListLabelRef(t) ::= "<ctx(t)>.<ListLabelName(t.name)>"
SetAttr(s,rhsChunks) ::= "<ctx(s)>.<s.name> = <rhsChunks>;"

TokenLabelType() ::= "<file.TokenLabelType; null={Token}>"
InputSymbolType() ::= "<file.InputSymbolType; null={Token}>"

TokenPropertyRef_text(t) ::= "(<ctx(t)>.<t.label> !is null ? <ctx(t)>.<t.label>.getText.get!string : null)"
TokenPropertyRef_type(t) ::= "(<ctx(t)>.<t.label> !is null ? <ctx(t)>.<t.label>.getType :0)"
TokenPropertyRef_line(t) ::= "(<ctx(t)>.<t.label> !is null ? <ctx(t)>.<t.label>.getLine : 0)"
TokenPropertyRef_pos(t) ::= "(<ctx(t)>.<t.label> != null ? <ctx(t)>.<t.label>.getCharPositionInLine: 0)"
TokenPropertyRef_channel(t) ::= "(<ctx(t)>.<t.label> !is null ? <ctx(t)>.<t.label>.getChannel : 0)"
TokenPropertyRef_index(t) ::= "(<ctx(t)>.<t.label> !is null ? <ctx(t)>.<t.label>.getTokenIndex: 0)"
TokenPropertyRef_int(t) ::= "(<ctx(t)>.<t.label> !is null ? to!int(<ctx(t)>.<t.label>.getText.get!string) : 0)"

RulePropertyRef_start(r) ::= "(<ctx(r)>.<r.label>?(<ctx(r)>.<r.label>.start).getText.get!string:null)"
RulePropertyRef_stop(r)  ::= "(<ctx(r)>.<r.label>?(cast(CommonToken)(<ctx(r)>.<r.label>.stop)).toString:null)"
RulePropertyRef_text(r)  ::= "(<ctx(r)>.<r.label>?_input.getText(<ctx(r)>.<r.label>.start,<ctx(r)>.<r.label>.stop).get!string:null)"
RulePropertyRef_ctx(r)   ::= "<ctx(r)>.<r.label>"
RulePropertyRef_parser(r)    ::= "this"

ThisRulePropertyRef_start(r) ::= "_localctx.start"
ThisRulePropertyRef_stop(r)  ::= "_localctx.stop"
ThisRulePropertyRef_text(r)  ::= "_input.getText(_localctx.start, _input.LT(-1))"
ThisRulePropertyRef_ctx(r)   ::= "_localctx"
ThisRulePropertyRef_parser(r)    ::= "this"

NonLocalAttrRef(s)       ::= "((<s.ruleName; format=\"cap\">Context)getInvokingContext(<s.ruleIndex>)).<s.name>"
SetNonLocalAttr(s, rhsChunks)     ::=
    "((<s.ruleName; format=\"cap\">Context)getInvokingContext(<s.ruleIndex>)).<s.name> = <rhsChunks>;"

AddToLabelList(a) ::= "<ctx(a.label)>.<a.listName> ~= (<labelref(a.label)>);"

TokenDecl(t) ::= "<TokenLabelType()> <t.name>"
TokenTypeDecl(t) ::= "int <t.name>;"
TokenListDecl(t) ::= "<Token>[] <t.name>;"
RuleContextDecl(r) ::= "<r.ctxName> <r.name>"
RuleContextListDecl(rdecl) ::= "<rdecl.ctxName>[] <rdecl.name>;"

ContextTokenGetterDecl(t)      ::=
    "public TerminalNode <t.name>() { return getToken(<parser.name>.<t.name>, 0); }"
ContextTokenListGetterDecl(t)  ::=
    "public TerminalNode[] <t.name>() { return getTokens(<parser.name>.<t.name>); }"
ContextTokenListIndexedGetterDecl(t)  ::= <<
public TerminalNode <t.name>(int i) {
    return getToken(<parser.name>.<t.name>, i);
}
>>
ContextRuleGetterDecl(r)       ::= <<
public <r.ctxName> <r.name>() {
    return getRuleContext!<r.ctxName>(0);
}
>>
ContextRuleListGetterDecl(r)   ::= <<
public <r.ctxName>[] <r.name>() {
    return getRuleContexts!<r.ctxName>;
}
>>
ContextRuleListIndexedGetterDecl(r)   ::= <<
public <r.ctxName> <r.name>(int i) {
    return getRuleContext!<r.ctxName>(i);
}
>>

LexerRuleContext() ::= "RuleContext"

/** The rule context name is the rule followed by a suffix; e.g.,
 *  r becomes rContext.
 */
RuleContextNameSuffix() ::= "Context"

ImplicitTokenLabel(tokenName) ::= "_<tokenName>"
ImplicitRuleLabel(ruleName)   ::= "_<ruleName>"
ImplicitSetLabel(id)          ::= "_tset<id>"
ListLabelName(label)          ::= "<label>"

CaptureNextToken(d) ::= "<d.varName> = _input.LT(1);"
CaptureNextTokenType(d) ::= "<d.varName> = _input.LA(1);"

StructDecl(struct,ctorAttrs,attrs,getters,dispatchMethods,interfaces,extensionMembers)
    ::= <<
public static class <struct.name> : <if(contextSuperClass)><contextSuperClass><else>ParserRuleContext<endif><if(interfaces)>, <interfaces; separator=", "><endif> {
    <attrs:{a | public <a>;}; separator="\n">
    <getters:{g | <g>}; separator="\n">
    <if(ctorAttrs)>public this(ParserRuleContext parent, int invokingState) { super(parent, invokingState); }<endif>
    public this(ParserRuleContext parent, int invokingState<ctorAttrs:{a | , <a>}>) {
        super(parent, invokingState);
        <struct.ctorAttrs:{a | this.<a.name> = <a.name>;}; separator="\n">
    }
    override public size_t getRuleIndex() { return RULE_<struct.derivedFromName>; }
<if(struct.provideCopyFrom)> <! don't need copy unless we have subclasses !>
    public this() { }
        alias copyFrom = ParserRuleContext.copyFrom;
    public void copyFrom(<struct.name> ctx) {
        super.copyFrom(ctx);
        <struct.attrs:{a | this.<a.name> = ctx.<a.name>;}; separator="\n">
    }
<endif>
    <dispatchMethods; separator="\n">
    <extensionMembers; separator="\n">
}
>>

AltLabelStructDecl(struct,attrs,getters,dispatchMethods) ::= <<
public static class <struct.name> : <currentRule.name; format="cap">Context {
    <attrs:{a | public <a>;}; separator="\n">
    <getters:{g | <g>}; separator="\n">
        alias copyFrom = <currentRule.name; format="cap">Context.copyFrom;
    public this(<currentRule.name; format="cap">Context ctx) { copyFrom(ctx); }
    <dispatchMethods; separator="\n">
}
>>

ListenerDispatchMethod(method) ::= <<
import <parser.grammarName>Listener;
override
public void <if(method.isEnter)>enter<else>exit<endif>Rule(ParseTreeListener listener) {
    if (cast(<parser.grammarName>Listener.<parser.grammarName>Listener)listener)
        (cast(<parser.grammarName>Listener)listener).<if(method.isEnter)>enter<else>exit<endif><struct.derivedFromName; format="cap">(this);
}
>>

VisitorDispatchMethod(method) ::= <<
import std.variant : Variant;
override
public Variant accept(ParseTreeVisitor visitor) {
    import <file.grammarName>Visitor : <file.grammarName>Visitor;
    if (cast(<parser.grammarName>Visitor)visitor)
        return (cast(<parser.grammarName>Visitor)visitor).visit<struct.derivedFromName; format="cap">(this);
    else
        return visitor.visitChildren(this);
}
>>

AttributeDecl(d) ::= "<d.type> <d.name><if(d.initValue)> = <d.initValue><endif>"

/** If we don't know location of label def x, use this template */
labelref(x) ::= "<if(!x.isLocal)>(cast(<x.ctx.name>)_localctx).<endif><x.name>"

/** For any action chunk, what is correctly-typed context struct ptr? */
ctx(actionChunk) ::= "(cast(<actionChunk.ctx.name>)_localctx)"

// used for left-recursive rules
recRuleAltPredicate(ruleName,opPrec)  ::= "precpred(ctx_, <opPrec>)"
recRuleSetReturnAction(src,name)      ::= "$<name>=$<src>.<name>;"
recRuleSetStopToken()                 ::= "ctx_.stop = _input.LT(-1);"

recRuleAltStartAction(ruleName, ctxName, label, isListLabel) ::= <<
_localctx = new <ctxName>Context(_parentctx, _parentState);
<if(label)>
<if(isListLabel)>
_localctx.<label> ~= _prevctx;
<else>
_localctx.<label> = _prevctx;
<endif>
<endif>
<if(label)>_localctx.<label> = _prevctx;<endif>
pushNewRecursionContext(_localctx, _startState, RULE_<ruleName>);
>>

recRuleLabeledAltStartAction(ruleName, currentAltLabel, label, isListLabel) ::= <<
_localctx = new <currentAltLabel; format="cap">Context(new <ruleName; format="cap">Context(_parentctx, _parentState));
<if(label)>
<if(isListLabel)>
(cast(<currentAltLabel; format="cap">Context)_localctx).<label> ~= (_prevctx);
<else>
(cast(<currentAltLabel; format="cap">Context)_localctx).<label> = _prevctx;
<endif>
<endif>
pushNewRecursionContext(_localctx, _startState, RULE_<ruleName>);
>>

recRuleReplaceContext(ctxName) ::= <<
_localctx = new <ctxName>Context(_localctx);
ctx_ = _localctx;
_prevctx = _localctx;
>>

recRuleSetPrevCtx() ::= <<
if (_parseListeners) triggerExitRuleEvent();
_prevctx = _localctx;
>>


LexerFile(lexerFile, lexer, namedActions) ::= <<
<fileHeader(lexerFile.grammarFileName, lexerFile.ANTLRVersion)>
<if(lexerFile.genPackage)>
package <lexerFile.genPackage>;
<endif>
<namedActions.header>
import antlr.v4.runtime.Lexer;
import antlr.v4.runtime.CharStream;
import antlr.v4.runtime.InterfaceRuleContext;
import antlr.v4.runtime.RuleContext;
import antlr.v4.runtime.RuntimeMetaData;
import antlr.v4.runtime.Token;
import antlr.v4.runtime.TokenStream;
import antlr.v4.runtime.Vocabulary;
import antlr.v4.runtime.VocabularyImpl;
import antlr.v4.runtime.atn.ATN : ATN;
alias ATNType = ATN;
import antlr.v4.runtime.atn.PredictionContextCache;
import antlr.v4.runtime.atn.ATNDeserializer;
import antlr.v4.runtime.atn.LexerATNSimulator;
import antlr.v4.runtime.dfa.DFA;
import antlr.v4.runtime.LexerNoViableAltException;

<lexer>
>>

Lexer(lexer, atn, actionFuncs, sempredFuncs, superClass) ::= <<
public class <lexer.name> : <superClass; null="Lexer"> {
    alias recover = Lexer.recover;
    static this() { RuntimeMetaData.checkVersion("<lexerFile.ANTLRVersion>", RuntimeMetaData.VERSION); }

    protected static DFA[] _decisionToDFA;
    protected PredictionContextCache _sharedContextCache =
        new PredictionContextCache();
    <if(lexer.tokens)>
    public static immutable int
        <lexer.tokens:{k | <k>=<lexer.tokens.(k)>}; separator=",",
    wrap, anchor>;
    <endif>
    <if(lexer.channels)>
    public static immutable int
        <lexer.channels:{k | <k>=<lexer.channels.(k)>}; separator=",", wrap, anchor>;
    <endif>
    public static string[] channelNames = [
        "DEFAULT_TOKEN_CHANNEL", "HIDDEN"<if (lexer.channels)>, <lexer.channels:{c| "<c>"}; separator=",", wrap, anchor><endif>
    ];
    public static string[] modeNames = [
        <lexer.modes:{m| "<m>"}; separator=",", wrap, anchor>
    ];

    public static string[] ruleNames = [
        <lexer.ruleNames:{r | "<r>"}; separator=",", wrap, anchor>
    ];

    <vocabulary(lexer.literalNames, lexer.symbolicNames)>

    <namedActions.members>

    public this(CharStream input) {
        super(input);
        _interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
    }

    override
    public string getGrammarFileName() { return "<lexer.grammarFileName>"; }

    override
    public string[] getRuleNames() { return ruleNames; }

    override
    public wstring getSerializedATN() { return _serializedATN; }

        override
    public string[] getChannelNames() { return channelNames; }

    override
    public string[] getModeNames() { return modeNames; }

    override
    public ATNType getATN() { return _ATN; }

    <dumpActions(lexer, "", actionFuncs, sempredFuncs)>
    <atn>
}
>>

SerializedATN(model) ::= <<
<if(rest(model.segments))>
<! requires segmented representation !>
private static immutable int _serializedATNSegments = <length(model.segments)>;
<model.segments:{segment|private static immutable wstring _serializedATNSegment<i0> =
    "<segment; wrap={"~<\n><\t>"}>";}; separator="\n">

public static immutable wstring _serializedATN =
        <model.segments:{segment | _serializedATNSegment<i0>}; separator=" ~\n">
;
<else>
<! only one segment, can be inlined !>
public static immutable wstring _serializedATN =
    "<model.serialized; wrap={"~<\n><\t>"}>";
<endif>
public static ATNType _ATN;

static this() {
    auto atnDeserializer = new ATNDeserializer;
    _ATN = atnDeserializer.deserialize(_serializedATN);
    _decisionToDFA.length = 0;
    for (int i = 0; i \< _ATN.getNumberOfDecisions(); i++) {
        _decisionToDFA ~= new DFA(_ATN.getDecisionState(i), i);
    }
<!  org.antlr.v4.tool.DOTGenerator dot = new org.antlr.v4.tool.DOTGenerator(null);!>
<!  System.out.println(dot.getDOT(_ATN.decisionToState.get(0), ruleNames, false));!>
<!  System.out.println(dot.getDOT(_ATN.ruleToStartState[2], ruleNames, false));!>
}
>>

/** Using a type to init value map, try to init a type; if not in table
 *  must be an object, default value is "null".
 */
initValue(typeName) ::= <<
<dTypeInitMap.(typeName)>
>>

codeFileExtension() ::= ".d"
